# 为什么需要ThreadLocal:
  This class provides thread-local variables.  These variables differ from
  their normal counterparts in that each thread that accesses one (via its
  {@code get} or {@code set} method) has its own, independently initialized
  copy of the variable.  {@code ThreadLocal} instances are typically private
  static fields in classes that wish to associate state with a thread (e.g.,
  a user ID or Transaction ID).
 Josh Bloch and Doug Lea这样写的.
我粗略翻译一下：这个类提供了线程本地变量。这个变量不同于其他普通作用允许一个有他自己的记录，独立变量的初始化拷贝。
实例是一个经典类型的私有化区域在想要和一个线程联合状态的类中。

自己的理解，就是threadLocal就是提供了一种手段，能够保证每个线程在堆中有一块自己的区域用来存放自己线程内部的变量。

分析下：threadLocal和synchronized，这两种处理问题的思路不同，threadLocal解决的是线程阻塞等待获取锁的问题，每个线程可以操作你自己的那块面包
而synchronized操作的是一块面包，我在吃的时候，其他人不允许吃。对比下：threadLocal就会感觉更占资源一些，所有线程都需要自己的面包，他其实是
用空间换时间，synchronized节约资源，但是确耗费时间。两种的处理场景不同：我理解threadLocal用在某些局部利用率高的场景，而synchronized用在资源
利用率低的场景。比较粗陋，希望后面可以理解的更深。

==================================================================================================================================

# 分析下汇编指令是什么
看源代码之前，我想看下用threadLocal的反编译的内容是什么，首先贴一段代码：
public class ThreadLocalTest {
  static ThreadLocal<String> threadLocal = new ThreadLocal<>();
  public static void main(String[] args) {
    threadLocal.set("main");
    System.out.println(threadLocal.get());
  }
}

* javap -v ThreadLocalTest.class，得出内容如下：

public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=1, args_size=1
         0: getstatic     #2                  // Field threadLocal:Ljava/lang/ThreadLocal;
         3: ldc           #3                  // String main
         5: invokevirtual #4                  // Method java/lang/ThreadLocal.set:(Ljava/lang/Object;)V
         8: getstatic     #5                  // Field java/lang/System.out:Ljava/io/PrintStream;
        11: getstatic     #2                  // Field threadLocal:Ljava/lang/ThreadLocal;
        14: invokevirtual #6                  // Method java/lang/ThreadLocal.get:()Ljava/lang/Object;
        17: checkcast     #7                  // class java/lang/String
        20: invokevirtual #8                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        23: return
      LineNumberTable:
        line 11: 0
        line 12: 8
        line 13: 23

  static {};
    descriptor: ()V
    flags: ACC_STATIC
    Code:
      stack=2, locals=0, args_size=0
         0: new           #9                  // class java/lang/ThreadLocal
         3: dup
         4: invokespecial #10                 // Method java/lang/ThreadLocal."<init>":()V
         7: putstatic     #2                  // Field threadLocal:Ljava/lang/ThreadLocal;
        10: return
      LineNumberTable:
        line 9: 0
}
从上到下分析一下javap反编译的情况，因为是带有static变量，所以用javap -v，如果不想打印详细的变量 javap -c
查询官网指令集 https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html
发现调用过程是这样的：
0：getstatic—>从类里面获取一个静态区域:
3：从运行的常量池里面加载String引用到栈
5：指令用于调用对象的实例方法，根据对象的实际类型进行分派，这里调用的ThreadLocal实例的set()方法并赋值，set的V值
8：获取System、Out对象输出
11、14：指令用于调用对象的实例方法，根据对象的实际类型进行分派，这里调用的ThreadLocal实例的get()方法.
17：判断是否是被给于的类型
20：获取System、Out对象输出
23：返回
==================================================================================================================================

# 接下来分析方法和数据结构
1、首先我们来看ThreadLocal有多少个局部变量和多少方法：
threadLocalHashCode、静态变量：nextHashCode、HASH_INCREMENT
为啥要设置这三个变量，等会回头来看。
方法：
nextHashCode()、initialValue()、withInitial(Supplier<? extends S> supplier) 、get()、setInitialValue()、set(T value)
remove()、getMap(Thread t)、createMap(Thread t, T firstValue)、
静态内部类：SuppliedThreadLocal、ThreadLocalMap
2、通过数据结构，好像看不来啥，那就找个方法入门吧，就从set(T value)方法发起吧
set()方法，我们想的是肯定是一个赋值方法，对于一个需要线程私有化数据，一般会怎么做呢：
首先拿到当前线程的数据，然后给他设置值，我们都知道对象实例的数据都会在堆区体现，那么设置值的区域，肯定也在堆区，只不过不能让其他线程看到（这个有意思吧）
我们怎么分析这个逻辑呢：我的想法，为了不让别人看到，我肯定定义一个我自己带有我自己特征的东西，就跟有时候打回的时候，可能会存在多个相同的水杯，
那我贴个自己的标签。
设置值就需要有个容器放置，这里就涉及到一个hash map表了，为啥要用hash map，因为查找和加入的效率都足够高，下面看一下代码：
/**
     * Sets the current thread's copy of this thread-local variable
     * to the specified value.  Most subclasses will have no need to
     * override this method, relying solely on the {@link #initialValue}
     * method to set the values of thread-locals.
     *
     * @param value the value to be stored in the current thread's copy of
     *        this thread-local.
     */
    public void set(T value) {
        Thread t = Thread.currentThread();
        ThreadLocalMap map = getMap(t);
        if (map != null)
            map.set(this, value);
        else
            createMap(t, value);
    }
   有没有发现这段代码很简单，一共7行，可读性也很好，我们试着读一下：1、获得当前线程 2、通过当前线程拿到当前线程的一块存储map结构
   3、这个map结构为空，则创建个map（这里面有个问题，创建好需要给这个线程吧，所以入参需要传当前线程） 如果不为空，就给这个map设置值
   
   先不分析这个map结构，先看眼这个getMap的逻辑，我们想看看他是怎么通过传入当前线程拿到这个map的，这样的话有可能我们就分析出来map的
   存放的一些规律。
   /**
     * Get the map associated with a ThreadLocal. Overridden in
     * InheritableThreadLocal.
     *
     * @param  t the current thread
     * @return the map
     */
    ThreadLocalMap getMap(Thread t) {
        return t.threadLocals;
    }
    哇~，看清楚了么？就是直接返回当前线程的一个threadLocals局部变量，这个变量是在Thread内部，但是呢，其实这个类型是ThreadLocal的静态内部类。
    也就是其实我每次在设置值的时候，我先拿到当前线程的threadLocals的内容，这块内容只属于这个线程么？是这样的，为啥呢，因为每个线程都会在堆区开
    一片这个内存机构，保证了各个线程的隔离性。
    那我们再看一样创建map方法，因为刚刚get的时候获取的是thread的内容，那我们猜想在这块创建map时也是会对应创建当前线程的threadLocal结构。
    /**
     * Create the map associated with a ThreadLocal. Overridden in
     * InheritableThreadLocal.
     *
     * @param t the current thread
     * @param firstValue value for the initial entry of the map
     */
    void createMap(Thread t, T firstValue) {
        t.threadLocals = new ThreadLocalMap(this, firstValue);
    }
    果然不负众望，确实是这样，在这里面线程里面的这个结构也是懒加载，也是为了避免内存浪费吧，这里赋初值把value赋值给这个map
3、看完set()，再看看get（）
/**
     * Returns the value in the current thread's copy of this
     * thread-local variable.  If the variable has no value for the
     * current thread, it is first initialized to the value returned
     * by an invocation of the {@link #initialValue} method.
     *
     * @return the current thread's value of this thread-local
     */
    public T get() {
        Thread t = Thread.currentThread();
        ThreadLocalMap map = getMap(t);
        if (map != null) {
            ThreadLocalMap.Entry e = map.getEntry(this);
            if (e != null) {
                @SuppressWarnings("unchecked")
                T result = (T)e.value;
                return result;
            }
        }
        return setInitialValue();
    }
哇，果然大佬写的确实比较简单，简单分析下吧，先拿到当前线程，再用当前线程获取一个map,如果存在值的，则
通过map.getEntry(this)获取当前线程的ThreadLocalMap.Entry对象，然后再获取他的值，发现了么，map.getEntry(this)
直接可以拿到entry对象，先不看getEntry内部实现，我们暂且猜测是通过hash获取数组下表，在通过遍历链表拿到这个值，
暂时这么猜测吧，因为hashmap就是这么实现的。
有意思的是：如果能拿到map的话，则返回，否则调用setInitialValue()，这么设计有点意思，也就是说TheadLocal不会返回null? 拔下setInitialValue()
 /**
     * Variant of set() to establish initialValue. Used instead
     * of set() in case user has overridden the set() method.
     *
     * @return the initial value
     */
    private T setInitialValue() {
        T value = initialValue();
        Thread t = Thread.currentThread();
        ThreadLocalMap map = getMap(t);
        if (map != null)
            map.set(this, value);
        else
            createMap(t, value);
        return value;
    }
    这里比较有意思的是，先调用了initialValue（）方法，本来以为有多高端，结果：
    protected T initialValue() {
        return null;
    }
    只要这个线程获取过这个值，就会创建个map，只不过这个map的value值是null，为啥要这么设计呢？
    这么设计有这么一个好处，如果当前线程通过调用threadLocal的方法拿不到值时，当前线程就会初始化一个map的数据结构，
    否则就会把null放到map中，这也是一种懒加载的方式，解决的是不用在每块线程中都初始化map和赋值。
    
    #总结下：set和get方法基本上分析完了，从整理逻辑看比较简单，其实看逻辑就是通过找到当前线程的map，然后或操作map或查询map，其实都是操作map结构
    下面就分析下Thread内部的这个map结构
    
    ==================================================================================================================================
    ThreadLocalMap：
    作者解释：
     /**
     * ThreadLocalMap is a customized hash map suitable only for
     * maintaining thread local values. No operations are exported
     * outside of the ThreadLocal class. The class is package private to
     * allow declaration of fields in class Thread.  To help deal with
     * very large and long-lived usages, the hash table entries use
     * WeakReferences for keys. However, since reference queues are not
     * used, stale entries are guaranteed to be removed only when
     * the table starts running out of space.
     */
     翻译一下：threadLocalMap 是一个自定义的hash map适用于管理线程局部变量。在除了ThreadLocal class以外的类里面
     没有操作权限。这个类在线程类Thread内部是一个私有局部变量。为了帮助处理非常大和长时间存活的对象，这个hash table entry
     使用的是弱引用对于keys。然而，表开始超空间运行，自引用队列不被使用，老的实体将被担保被移除。
     这里面有一个关键词可能在研究这个map之前，这里提到一个弱引用，什么是弱引用？弱引用有什么好处。
     
# 插入一段弱引用：
先贴一段：https://docs.oracle.com/javase/6/docs/api/java/lang/ref/WeakReference.html
Weak reference objects, which do not prevent their referents from being made finalizable, finalized, and then reclaimed. 
弱引用对象，不能阻止他们的引用被finalized和回收，finalized（会在垃圾回收处详细讲解）。
Weak references are most often used to implement canonicalizing mappings.
弱引用通常用于实现规范化映射，不太懂，没关系。
Suppose that the garbage collector determines at a certain point in time that an object is weakly reachable. 
假设垃圾收集器在某个时间点确定对象是弱可访问的
At that time it will atomically clear all weak references to that object and all weak references to any other weakly-reachable objects from which that object is reachable through a chain of strong and soft references.
并且在这个点，将自动清除所有这个对象的弱引用和所有弱引用来自于其他弱可达来自于这个对象被强引用和软引用的链上。
At the same time it will declare all of the formerly weakly-reachable objects to be finalizable. At the same time or at some later time it will enqueue those newly-cleared weak references that are registered with reference queues. 
同时他将定义所有以前弱可达的对象被finalizable。同时或者稍后一点时间他将这些新的被清除的被注册在引用队列的弱引用入队列。

字面含义比较难理解，得看看场景吧。
总结一下：弱引用就是提供了一种手段，保证了某些资源的回收，threadLocal里面为啥要用弱引用，这是一种防止内存泄漏的手段，其实我们看threadLocal里面get()
和set()请求里面很多引用到entry对应的，其实在一种情况下，并发线程数极高的情况下，如果是强引用，可能在一段时间内堆内存都不会马上释放，这样的话，可能
导致jvm出现OOM情况，而现在用的弱引用，ThreadLocal的这个弱引用可以被注册在引用队列的弱引用入队列里面。
这里后面会提供个一比一的threadLocal强引用版本和软引用版本

ThreadLocalMap继续吧：
       /**
         * The initial capacity -- MUST be a power of two.
         */
        private static final int INITIAL_CAPACITY = 16;

        /**
         * The table, resized as necessary.
         * table.length MUST always be a power of two.
         */
        private Entry[] table;

        /**
         * The number of entries in the table.
         */
        private int size = 0;

        /**
         * The next size value at which to resize.
         */
        private int threshold; // Default to 0
        
这三个是默认的局部变量，发下跟hash map这种hash表的方式不一样，我们都知道hash表里面一定会有偏移量这种参数来控制resize的时机，但是发现这个里面没有
同样有INITIAL_CAPACITY，初始化容量，同样是2的倍数，threshold这个参数很有意思，意思等到resize的时候，下一个尺寸计算的容量值。
从局部变量看ThreadLocal是一个动态数组，而且很有意思的是他也是求hash值来放置元素在桶中的位置。

